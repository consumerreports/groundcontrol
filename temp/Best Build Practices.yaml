testName: |+

  Best Build Practices

criterias:
  - criteriaName: >+
      The software was built and developed according to the industry's best
      practices for security.

    indicators:
      - indicator: The product was built with effectively implemented safety features.
        procedures:
          - >
            Run static analysis software to determine what application armoring
            features are present.


            Are there Stack Guards, and if so, are they effectively implemented?


            Are all safety features available in the pertinent OS enabled?
            (e.g., ASLR, CFI, RELRO, DEP, etc.)


            Are those safety features well implemented and/or enabled with
            optimal settings? (E.g., High Entropy ASLR, rather than just Dynamic
            Base on Windows 10)


            Are the binaries 32 or 64 bit?
      - indicator: The software does not make use of unsafe functions or libraries.
        procedures:
          - >-
            Pull out data from the binary that speaks to developer hygiene.


            Do they use strcpy and other historically unsafe functions?


            Did the developers use older, less historically safe functions, or
            newer, safer replacements for those functions?


            What risks are introduced via the libraries that the binary links
            to, either directly or indirectly?
      - indicator: |+
          The software is not overly complex.

        procedures:
          - |+
            Pull out data from the binary that speaks to code complexity.

            What is the branch density?

            How many stack adjusts, function calls, etc are there?

            How complex is the code?

readinessFlag: '1'
